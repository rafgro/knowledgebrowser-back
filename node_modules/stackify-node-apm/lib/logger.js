'use strict'

const rfs = require('rotating-file-stream')
const moment = require('moment')
const path = require('path')
const vsprintf = require('sprintf-js').vsprintf
const stringify = require('json-stringify-safe')
const fs = require('fs')
const Util = require('./util')

const _directory = process.platform === 'win32' ? path.join(__dirname, '..') : '/usr/local/stackify/stackify-node-apm/log'
const _filename = 'stackify-node-apm.log'
const _levels = {
  'DEBUG': 1,
  'INFO': 2,
  'WARN': 3,
  'ERROR': 4
}

/**
 * Simple file/console logger.
 * @constructor
 */
function Logger () {
  this._options = {}
  this._options.enabled = true
  this._console = true
  this._options.level = _levels['ERROR']
  this._applicationName = null
  this._directory = _directory

  let error = null
  try {
    this.loadLogFile()
  } catch (err) {
    error = err.message
  }

  if (error) {
    this.error(error)
  }
}

Logger.prototype.loadLogFile = function loadLogFile () {
  if (this._stream) {
    throw new Error('Logger: Node APM Log directory is already set')
  }

  process.umask(0)
  if (fs.existsSync(this._directory)) {
    this._stream = rfs(_filename, {
      size: '50M',
      immutable: true,
      maxFiles: 1,
      path: this._directory,
      mode: 0o777
    })

    this._stream.on('error', function (err) {
      console.log('Logger._stream::on(error) - %s', err)
    })

    this._stream.on('warning', function (err) {
      console.log('Logger._stream::on(warning) - %s', err)
    })
  } else {
    throw new Error('Logger: Node APM Log directory is not accessible')
  }
}

Logger.prototype.debug = function debug (msg) {
  if (this._options.level <= _levels['DEBUG']) {
    this._write('DEBUG', msg, arguments)
  }
}

Logger.prototype.info = function info (msg) {
  if (this._options.level <= _levels['INFO']) {
    this._write('INFO', msg, arguments)
  }
}

Logger.prototype.warn = function warn (msg) {
  if (this._options.level <= _levels['WARN']) {
    this._write('WARN', msg, arguments)
  }
}

Logger.prototype.error = function error (msg) {
  if (this._options.level <= _levels['ERROR']) {
    this._write('ERROR', msg, arguments)
  }
}

Logger.prototype._write = function _write (level, msg, args) {
  if (level && msg) {
    let prefix = moment.utc().format('YYYY-MM-DD HH:mm:ss,SSS') + ' ' + level + ' [Stackify] ' + (this._applicationName ? '[' + this._applicationName + '] - ' : '')
    let formattedArgs = Array.prototype.slice.call(args, 1)
    for (let i = 0; i < formattedArgs.length; i++) {
      if (formattedArgs[i] && (typeof formattedArgs[i] === 'object')) {
        formattedArgs[i] = stringify(formattedArgs[i])
      }
    }
    let formattedMsg = prefix + vsprintf(msg, formattedArgs)
    if (this._console) {
      console.log(formattedMsg)
    }
    if (this._stream) {
      this._stream.write(formattedMsg + '\n')
    }
  }
}

Logger.prototype.setApplicationName = function setApplicationName (applicationName) {
  this._applicationName = applicationName
}

Logger.prototype.getApplicationName = function getApplicationName () {
  return this._applicationName
}

/**
 * Set log level for the logger
 * @param {String} level - log level
 */
Logger.prototype.setLogLevel = function setLogLevel (level) {
  if (!Util.isNumber(level)) {
    return
  }

  this._options.level = level
}

/**
 * Get log level of the logger
 * @returns {String} log level of the logger
 */
Logger.prototype.getLogLevel = function getLogLevel () {
  return this._options.level
}

/**
 * Get directory of the log file
 * @returns {string} - Location of the log file
 */
Logger.prototype.getDirectory = function getDirectory () {
  return this._directory
}

/**
 * Get directory of the log file
 * @param {string} directory - Location of the log file
 */
Logger.prototype.setDirectory = function setDirectory (directory) {
  this._directory = directory
}

module.exports = new Logger()
