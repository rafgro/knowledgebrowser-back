'use strict'

const path = require('path')
const fs = require('fs')
const Logger = require('./logger')
const Util = require('./util')

const DEFAULT_FILENAME = 'stackify.js'
const RUM_ASSET_URL_DEV = 'https://stckjs.azureedge.net/stckjs.dev.js' // eslint-disable-line
const RUM_ASSET_URL_QA = 'https://stckjs.azureedge.net/stckjs.qa.js' // eslint-disable-line
const RUM_ASSET_URL_MC = 'https://stckjs.azureedge.net/stckjs.mc.js' // eslint-disable-line
const RUM_ASSET_URL_PROD = 'https://stckjs.azureedge.net/stckjs.js' // eslint-disable-line

// places to look for configuration file (DEFAULT_FILENAME)
const CONFIG_FILE_LOCATIONS = [
  path.dirname(require.main.filename),
  process.cwd(),
  process.env.HOME,
  path.join(__dirname, '../../../..')
]

const PROPERTY_FILENAME = 'stackify.properties'
const PROPERTY_LOCATION =
  process.platform === 'win32'
    ? path.join(__dirname, '..')
    : '/usr/local/stackify/stackify-node-apm/'

/**
 * Profiler configuration.
 * @constructor
 */
function Config () {
  // defaults
  this.applicationName = 'Node Application'
  this.environmentName = 'Production'
  this.clientId = null
  this.clientDeviceId = null
  this.customInstrumentations = null
  this.debugEnabled = false
  this.rumAssetUrl = RUM_ASSET_URL_PROD
  this.clientRumDomain = null

  this._setupConfiguration()
  this._setupProperties()

  Logger.info('Application Name: %s', this.applicationName)
  Logger.info('Environment Name: %s', this.environmentName)
}

/**
 * Scans CONFIG_FILE_LOCATIONS returns 1st match that exists.
 * @return {string}
 * @private
 */
function _getStackifyConfigurationFile (fileLocation, fileName) {
  if (Util.isString(fileLocation)) {
    let filepath = path.join(path.resolve(fileLocation), Util.isString(fileName) ? fileName : DEFAULT_FILENAME)
    let fileRealpath

    Logger.info('Looking for configuration file: ' + filepath)
    if (fs.existsSync(filepath)) {
      fileRealpath = fs.realpathSync(filepath)
    } else {
      Logger.warn('Configuration file does not exist: %s', filepath)
    }

    if (fileRealpath) {
      return fileRealpath
    }
  }

  for (let i = 0; i < CONFIG_FILE_LOCATIONS.length; i++) {
    let configFile = CONFIG_FILE_LOCATIONS[i]

    if (!configFile) continue

    let filepath = path.join(path.resolve(configFile), DEFAULT_FILENAME)
    Logger.debug('Looking for configuration file: %s', filepath)
    if (!fs.existsSync(filepath)) continue

    return fs.realpathSync(filepath)
  }
}

/**
 * Loads configuration and sets app/env members.
 * @private
 */
Config.prototype._setupConfiguration = function (fileLocation, fileName) {
  let filepath = _getStackifyConfigurationFile(fileLocation, fileName)
  if (!filepath) {
    Logger.info('No Configuration File Found (%s).', DEFAULT_FILENAME)
    return
  }

  // Set defaults
  this.applicationName = 'Node Application'
  this.environmentName = 'Production'
  this.customInstrumentations = null
  this.debugEnabled = false

  let userConfiguration
  try {
    userConfiguration = require(filepath).config
  } catch (error) {
    Logger.error('Config._setupConfiguration - Unable to load config json file %s.', filepath, error)
  }

  if (userConfiguration && userConfiguration.debug && Util.isBoolean(userConfiguration.debug)) {
    this.debugEnabled = userConfiguration.debug
    this.updateLogger()
  }

  if (userConfiguration && userConfiguration.application_name) {
    this.applicationName = userConfiguration.application_name
  }

  if (userConfiguration && userConfiguration.environment_name) {
    this.environmentName = userConfiguration.environment_name
  }

  if (userConfiguration && userConfiguration.instrumentations && Util.isObject(userConfiguration.instrumentations)) {
    this.customInstrumentations = userConfiguration.instrumentations
  }
}

/**
 * Load and setup stackify device properties.
 * @param fileLocation
 * @param fileName
 * @private
 */
Config.prototype._setupProperties = function setupProperties (fileLocation, fileName) {
  let stackifyProperties = _readStackifyPropertyFile(fileLocation, fileName)

  // Reset config settings
  this.clientId = null
  this.clientDeviceId = null
  this.clientRumDomain = null

  if (!stackifyProperties) {
    return
  }

  if (stackifyProperties.clientId) {
    this.clientId = stackifyProperties.clientId
  }

  if (stackifyProperties.deviceId) {
    this.clientDeviceId = stackifyProperties.deviceId
  }

  if (stackifyProperties.clientRumDomain) {
    this.clientRumDomain = stackifyProperties.clientRumDomain
  }
}

/**
 * Returns Stackify Client ID
 * @return {numeric}
 */
Config.prototype.getClientId = function getClientId () {
  return this.clientId
}

/**
 * returns Stackify Device ID
 * @return {numeric}
 */
Config.prototype.getClientDeviceId = function getClientDeviceId () {
  return this.clientDeviceId
}

/**
 * Get user custom instrumentations
 * @returns {Array}
 */
Config.prototype.getCustomInstrumentations = function getClientDeviceId () {
  return this.customInstrumentations
}

/**
 * returns Stackify Client Rum URL
 * @return {String}
 */
Config.prototype.getClientRumDomain = function getClientRumDomain () {
  return this.clientRumDomain
}

Config.prototype.getApplicationName = function getApplicationName () {
  return this.applicationName
}

Config.prototype.getEnvironmentName = function getEnvironmentName () {
  return this.environmentName
}

Config.prototype.isDebugEnabled = function isDebugEnabled () {
  return this.debugEnabled
}

Config.prototype.setDebug = function isDebugEnabled (debug) {
  if (!Util.isBoolean(debug)) {
    return
  }
  this.debugEnabled = debug
  this.updateLogger()
}

const LogLevels = {
  'DEBUG': 1,
  'INFO': 2,
  'WARN': 3,
  'ERROR': 4
}

/**
 * Update log level of the logger
*/
Config.prototype.updateLogger = function updateLogger () {
  Logger.setLogLevel(this.debugEnabled ? LogLevels['DEBUG'] : LogLevels['ERROR'])
}

/**
 * Reads passed in stackify properties file
 * @param fileLocation
 * @param fileName
 * @return {*}
 * @private
 */
function _readStackifyPropertyFile (fileLocation, fileName) {
  let filepath = path.join(path.resolve(fileLocation || PROPERTY_LOCATION), fileName || PROPERTY_FILENAME)
  let fileRealpath

  Logger.info('Loading properties file: ' + filepath)

  if (fs.existsSync(filepath)) {
    fileRealpath = fs.realpathSync(filepath)
  } else {
    Logger.warn('Properties file does not exist: %s', filepath)
  }

  if (fileRealpath) {
    try {
      return require('ini').parse(fs.readFileSync(fileRealpath, 'utf-8'))
    } catch (e) {
      Logger.warn('Error parsing properties file: %s', filepath, e)
    }
  }

  return null
}

module.exports = Config
