'use strict'

const Logger = require('../logger')
const semver = require('semver')
const Util = require('./../util')

/**
 * Postgres module instrumentation
 * @param pg
 * @param tracer
 * @param shimmer
 * @param version
 */
module.exports = function (pg, tracer, shimmer, version) {
  if (!semver.satisfies(version, '>=4.0.0 <8.0.0')) {
    Logger.debug('pg version %s not supported', version)
    return pg
  }

  patchClient(pg.Client, 'pg.Client')

  return pg

  function patchClient (Client, call) {
    shimmer.wrap(Client.prototype, 'connect', wrapConnect)
    shimmer.wrap(Client.prototype, 'query', wrapQuery)

    /**
     * Wraps postgres connection call
     * @param original
     */
    function wrapConnect (original) {
      return function wrappedConnect () {
        let args = Util.argsToArray.apply(this, arguments)
        let callbackIndex = args.length - 1
        let hasCallback = false
        const span = tracer.createSpan(call + '.connect')
        if (span) {
          span.addProperty('CATEGORY', 'Database')
          span.addProperty('SUBCATEGORY', 'Open')
          span.addProperty('PROVIDER', 'postgres')
          span.addProperty('COMPONENT_CATEGORY', 'Database')
          span.addProperty('COMPONENT_DETAIL', 'Open Connection')

          if (Util.isFunction(args[callbackIndex]) && !Util.isMonkeyPatched(args[callbackIndex])) {
            let wrappedCallback = shimmer.wrap(args[callbackIndex], null, function wrapCallback (original) {
              return function wrappedCallback () {
                if (span) {
                  tracer.endSpan(span)
                }
                return tracer.bindSpanCallback(original, span).apply(this, arguments)
              }
            })
            if (typeof wrappedCallback !== 'undefined') {
              args[callbackIndex] = wrappedCallback
              hasCallback = true
            } else {
              Logger.error('Postgres:Connect - wrapConnect - Unable to wrap callback, something went wrong')
            }
          }
        }
        if (!hasCallback && semver.satisfies(version, '< 7.0.0')) {
          let noopCallback = shimmer.wrap(function noop () {}, null, function wrapConnect (original) {
            return tracer.bindSpanCallback(function wrappedCallback () {
              if (span) {
                tracer.endSpan(span)
              }
              return original.apply(this, arguments)
            }, span)
          })
          args.unshift(noopCallback)
        }
        let result = tracer.bindSpanCallback(original, span).apply(this, args)
        if (!hasCallback && Util.isPromise(result)) {
          result.then(function onFulfilled (value) {
            tracer.endSpan(span)
            return value
          }, function onRejected (err) {
            tracer.endSpan(span)
            throw err
          })
        }
        return result
      }
    }

    /**
     * Wraps postgres query call
     * @param original
     */
    function wrapQuery (original) {
      return function (sql) {
        let args = Util.argsToArray.apply(this, arguments)
        const span = tracer.createSpan(call + '.query')

        if (span) {
          span.addProperty('CATEGORY', 'Database')
          span.addProperty('SUBCATEGORY', 'Execute')
          span.addProperty('PROVIDER', 'postgres')
          span.addProperty('COMPONENT_CATEGORY', 'DB Query')
          span.addProperty('COMPONENT_DETAIL', 'Execute SQL Query')

          if (sql && typeof sql.text === 'string') {
            span.addProperty('SQL', sql.text)
          } else if (sql && typeof sql === 'string') {
            span.addProperty('SQL', sql)
          }

          let index = args.length - 1
          let cb = args[index]

          if (Array.isArray(cb)) {
            index = cb.length - 1
            if (Util.isFunction(cb[index]) && !Util.isMonkeyPatched(cb)) {
              cb[index] = wrapCallback(cb, index)
            }
          } else if (cb && typeof cb === 'function' && !Util.isMonkeyPatched(cb)) {
            args[index] = wrapCallback(args, index)
          }
        }
        let result = tracer.bindSpanCallback(original, span).apply(this, args)
        if (semver.satisfies(pg._version, '>=6.3.0 < 7.0.0')) {
          if (span && result && result._getPromise && !Util.isMonkeyPatched(result._getPromise)) {
            shimmer.wrap(result, '_getPromise', function wrapGetPromise (original) {
              return function wrappedGetPromise () {
                let resultPromise = original.apply(this, arguments)
                if (resultPromise && Util.isPromise(resultPromise) && typeof resultPromise.spanInContext === 'undefined') {
                  resultPromise.spanInContext = span
                }
                return resultPromise
              }
            })
          }
        }
        if (semver.satisfies(pg._version, '>=5.1.0 < 6.3.0')) {
          if (span && result && !result._getPromise && result.promise && !Util.isMonkeyPatched(result.promise)) {
            shimmer.wrap(result, 'promise', function wrapGetPromise (original) {
              return function wrappedGetPromise () {
                let resultPromise = original.apply(this, arguments)
                if (resultPromise && Util.isPromise(resultPromise) && typeof resultPromise.spanInContext === 'undefined') {
                  resultPromise.spanInContext = span
                }
                return resultPromise
              }
            })
          }
        }
        return result

        function wrapCallback (args, index) {
          let wrappedCallback = shimmer.wrap(args, index, function wrapCallback (original) {
            return function wrappedCallback () {
              if (span) {
                tracer.endSpan(span)
              }
              return tracer.bindSpanCallback(original, span).apply(this, arguments)
            }
          })
          return wrappedCallback
        }
      }
    }
  }
}
