'use strict'

const METHODS = ['del', 'get', 'head', 'opts', 'post', 'put', 'patch']

/**
 * restify module instrumentation
 * https://www.npmjs.com/package/restify
 * @param restify
 * @param tracer
 * @param shimmer
 * @param version
 */
module.exports = function (restify, tracer, shimmer, version) {
  shimmer.wrap(restify, 'createServer', wrapCreateServer)

  let wrappedServerClass = false

  return restify

  /**
   * Wraps create server (only executes once)
   * @param original
   */
  function wrapCreateServer (original) {
    return function () {
      let server = original.apply(this, arguments)

      if (server && !wrappedServerClass) {
        wrappedServerClass = true
        wrapServer(Object.getPrototypeOf(server))
      }

      return server
    }
  }

  /**
   * Wraps all method calls against server prototype
   * @param serverPrototype
   */
  function wrapServer (serverPrototype) {
    METHODS.forEach(method => {
      shimmer.wrap(serverPrototype, method, createWrapServerMethod(method))
    })

    /**
     * Wraps Create Server Method calls - in order to wrap actual request callbacks
     * @param method
     */
    function createWrapServerMethod (method) {
      return function (original) {
        return function () {
          if (arguments && arguments.length > 0) {
            let path = arguments[0]
            let cb = arguments[arguments.length - 1]
            if (typeof cb === 'function') {
              cb = wrapCallback(cb, path, 'restify.' + method)
              if (cb) {
                arguments[arguments.length - 1] = cb
              }
            }
          }

          return original.apply(this, arguments)

          /**
           * Wrap method callback - updated REPORTING_URL w/ passed in PATH
           * @param cb
           * @param path
           * @param call
           */
          function wrapCallback (cb, path, call) {
            return function () {
              let rootSpan = tracer.getActiveRootSpan()
              if (rootSpan) {
                rootSpan.addProperty('REPORTING_URL', path)
              }
              const span = tracer.createSpan(call)
              if (span) {
                span.addProperty('PATH', path)
              }
              let result = cb.apply(this, arguments)
              if (span) {
                tracer.endSpan(span)
              }
              return result
            }
          }
        }
      }
    }
  }
}
