'use strict'

const os = require('os')
const path = require('path')
const moment = require('moment')
const rfs = require('rotating-file-stream')
const Logger = require('./../logger')
const fs = require('fs')

const _directory = process.platform === 'win32' ? path.join(__dirname, '..') : '/usr/local/stackify/stackify-node-apm/log'
const _filenameBase = os.hostname() + '#' + process.pid

/**
 * Handles writing traces to disk
 * @constructor
 */
function TraceLogger () {
  process.umask(0)
  function generator (time, index) {
    let count = 1
    if (index) {
      count = index
    }
    return _filenameBase + '-' + count + '.log'
  }

  if (fs.existsSync(_directory)) {
    this._stream = rfs(generator, {
      size: '50M',
      interval: '1d',
      immutable: true,
      path: _directory,
      mode: 0o777
    })

    this._stream.on('error', function (err) {
      Logger.error('TraceLogger._stream::on(error) - %s', err)
    })

    this._stream.on('warning', function (err) {
      Logger.warn('TraceLogger._stream::on(warning) - %s', err)
    })
  }
}

/**
 * Save trace content to disk - synchronously
 * @param content
 */
TraceLogger.prototype.log = function (content) {
  // Get the current time and format it for placeholder prefix
  let prefix = moment.utc().format('YYYY-MM-DD, HH:mm:ss.SSSSSS> ')
  if (this._stream) {
    this._stream.write((prefix + content + '\n'))
  }
  Logger.debug(content)
}

module.exports = TraceLogger
